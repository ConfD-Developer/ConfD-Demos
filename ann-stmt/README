Extract tailf Extensions to a tailf:annotate-(module|statement) Module
======================================================================

tailf-annotate-module in combination with tailf:annotate-statement is often
used to annotate an existing module or submodule statement with a 'tailf'
statement. This is useful in order to add tailf statements to a module without
touching the module source, which also means that when the YANG models are
requested using NETCONF <get-schema> the annotations of tailf extensions that
may not be understood by the NETCONF client, unless the client is for example
NSO, will not be included in the YANG model. The  annotation statements can
then be placed in a separate annotation module, and passed to 'confdc'
(or 'pyang' or 'yanger') when the original module is compiled.

Often a ConfD project start with adding tailf extensions to its YANG models
and at a later stage move the extensions to a separate annotation file on a
for example using tailf:annotate-(module|statement).

However, by this time, there can be a large number of annotations and
performing the task manually can be tedious and time-consuming. This demo
attempts to do that work using a Python script.

About the demo:
o The demo converts YANG models to YIN XML using the pyang Python tool.
o The XML format is supported by many powerful tools that can aid in the
  modification of the YANG modules (now in YIN format).
o In this demo we use the powerful Python Beautiful Soup Python (bs4)
  library that in turn uses the lxml library for processing XML.
o After the tailf extension XML nodes have been extracted to
  tailf:annotate-(module|statement) variants, pyang is used to convert
  the new annotation module and the original YIN module back to YANG modules.
o Optionally "must" and "when" statements can be moved to the annotation
  module. This can be
  useful when debugging XPath evaluation issues.
o Just want to remove and not create an annotation file? There is a flag for
  that too.
o See flags used with the Python script for options.

See YANG RFC 7950 section 13 "YIN" for details on the YIN XML format

Prerequisites
-------------
confd-7.x.linux.x86_64.installer.bin
confd-7.x.libconfd.tar.gz
Docker installed

Steps
-----
1. Drop the confd-7.x* installation packages into the directory of this README.
2. Run the setup.sh script.
3. See the setup.sh script and the Dockerfile for details on the setup.
4. See the app/run.sh script for details on how it, in turn, use the simple
   Python script, tailf_ann_stmt.py, which extracts the tailf extensions and add
   them to tailf:annotation-statements
5. A bonus python script that just sanitize the tailf extensions from a YANG
   model and outputs the result to stout is also available. See
   tailf_sanetize.py.
   
Examples
--------
- Strip the original YANG module of "tailf:" extensions and create a *-ann.yang
  annotation module:

$ python3 tailf_ann_stmt.py -t my-yang-module.yang

- Strip the original YANG module of "tailf:" extensions and create a *-ann.yang
  annotation module. Place the annotation and stripped YANG module files in the
  "yang" directory:
  
$ python3 tailf_ann_stmt.py -o yang -t my-yang-module.yang

- More options:

$ python3 tailf_ann_stmt.py -h
usage: tailf_ann_stmt.py [-h] [-m] [-w] [-i] [-x] [-a] [-u] [-p] [-t] [-c] [-v] [-s] [-o OUTPUT] filename

positional arguments:
  filename              <file> YANG module filename that end with ".yang"

optional arguments:
  -h, --help            show this help message and exit
  -m, --must            remove all must statements
  -w, --when            remove all when startements
  -i, --minelem         remove all min-element statements
  -x, --maxelem         remove all max-element statements
  -a, --mandatory       remove all mandatory statements
  -u, --unique          remove all unique statements
  -p, --pattern         remove all pattern statements
  -t, --tailf           remove all tailf extensions
  -c, --callpoint       remove tailf:callpoint extensions
  -v, --validate        remove tailf:validate extensions
  -s, --sanitize        sanitize only without creating an annotation file
  -o OUTPUT, --output OUTPUT
                        Write the output to a different path than current folder
