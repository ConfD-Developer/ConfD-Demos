Enforce the requirements of a password policy
=============================================

There are often requirements on user's password quality according to a policy.
Most of the time these requirements can be checked using YANG "length",
"pattern", and/or "must" statements.

If we have a need to check that the password meet the requirements using
application code we must register a validation point. As we must run our
validation data provider application before the password is hashed or
encrypted, we the need to also register a transform data provider application
using high level YANG model where the password type set to "string". The string
is never stored in CDB and is set in CDB using a low level YANG model as the
CDB schema.

Note that it if possible, using lenght and (multiple) pattern statements has
the advantage for the CLI or WebUI JSON-RPC interfaces in that they will be
checked as the user enter the password. must statements and validation points
will be checked when the user commit the password change.

The YANG model setup:
---------------------

    NETCONF/RESTCONF/CLI/MAAPI/etc. client
       |   ^
       |   |
       |   |
       v   |
   --------------
  |              |
  |  users.yang  |
  |              |  high-level YANG model with tail:callpoint { transform }
  |              |  and tailf:validate statements
  |              |
  |              |------------>
  |              |              Validation applidation
  |              |<------------
   --------------
       |   ^
       |   |
     Transform application
       |   |
       v   |
     -------------------------
    |     tailf-aaa.yang      |
    |                         |
   -------------------------  |
  |                         | |
  |  ietf-netconf-acm.yang  | |  low-level YANG model
  |                         | |
  |                         | |
  |                         | |
  |                         | |
  |                         |-
  |                         |
   -------------------------

Typically we do not expose the low level YANG modes to the northbound
interfaces, but in this demo we still do. Recompile the low-level YANG model
with the --export=none confdc flag or add the tailf:export extension to the
YANG model.

Quick demo:
-----------

make all start cli-c
# config
(config)# users user admin password hello
-------------------------------------------------^
syntax error: The password must be at least 8 characters long
(config)# users user admin password hellowilly
-------------------------------------------------^
syntax error: The password must have at least one digit
(config)# users user admin password 1hellowilly
-------------------------------------------------^
syntax error: The password must have at least one upper case alpha
(config)# users user admin password 1helloWilly
-------------------------------------------------^
syntax error: The password must have at least one of these symbols: [<>~;:!@#/$%^&*=-]+
(config)# users user admin password 1hello-Willy
COHULT-M-54G0(config-user-admin)# commit
Aborted: 'users user admin password': The password must not end with 'Willy'
(config-user-admin)# users user admin password 1hello-World
(config-user-admin)# commit
The following warnings were generated:
  'users user admin password': Are you really sure you want password must end with 'World'
Proceed? [yes,no] no
Aborted: by user
(config-user-admin)# users user admin password hello-World1
(config-user-admin)# commit
Commit complete.
(config-user-admin)# end
COHULT-M-54G0# show running-config users user admin password
users user admin
 password $1$SaEiRb6q$7yQssjcl7/qGJYf/KJIw/0
!

Steps
-----
1. make stop clean all
2. confd_cli -u admin -C
3. See the "quick demo" above
