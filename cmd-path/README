Dump an XML listing of the CLI C/I-style commands with relative path and source
===============================================================================

When CLI commands are generated from YANG models, often using multiple
tailf:cli-* extensions, it can for more complex YANG models be tricky to find
the YANG model representation of the command and create a relative xpath/keypath
to it for use with, for example, the ConfD Data Provider (DP) API.

This demo will create an XML listing of the CLI C/I-style commands in two steps:
Step 1: Tag the YANG nodes that will become commands using the
tailf:meta-data/value YANG extension statements.
Step 2: Create a "cli-i-x-dump" XML file from the ConfD CDB schema and
meta-data/value tags

About the demo:
o The demo converts YANG models to YIN XML using the pyang Python tool.
o The XML format is supported by many powerful tools that can aid in the
  modification of the YANG modules (now in YIN format).
o In this demo we use the powerful Python Beautiful Soup Python (bs4)
  library that in turn uses the lxml library for processing XML.
o In step 1, pyang is used to convert the YANG model(s) to YIN XML. Beautiful
  Soup is then used to create tags and the YIN XML is then back to YANG.
o In step 2, Beautiful Soup and the ConfD schema (derived from the YANG model)
  is used to create XML listing of the CLI C/I-style commands with relative path
  and source.
o Support for three commonly used tailf:* YANG extensions are implemented as
  a starting point. tailf:alt-name, tailf:cli-drop-node-name, and
  tailf:cli-expose-key-name.

See YANG RFC 7950 section 13 "YIN" for details on the YIN XML format

Prerequisites
-------------
confd-7.x.linux.x86_64.installer.bin
confd-7.x.libconfd.tar.gz
Docker installed

Steps
-----
1. Drop the confd-7.x* installation packages into the directory of this README.
2. Run the setup.sh script.
3. See the setup.sh script and the Dockerfile for details on the setup.
4. See the app/run.sh script and Python scripts for details

Example
-------
An example output from step 1, a YANG model with tailf:meta-data/value "tags"
will be something like this:

  container native {
    tailf:cli-drop-node-name;
    container aaa {
      tailf:alt-name "alt-aaa";
      presence "";
      list common-criteria {
        description
          "AAA Common Criteria";
        tailf:cli-mode-name "config-cc-policy";
        key "policy test";
        leaf policy {
          tailf:cli-expose-key-name;
          tailf:alt-name "alt-policy";
          description
            "Policy name";
          type string {
            length "1..25";
          }
        }
        leaf test {
          type string;
        }
        leaf char-changes {
          description
            "Number of change characters between old and new passwords";
          tailf:cli-full-command;
          type uint8 {
            range "1..127";
          }
          default "4";
          tailf:meta-data "ID cc:2";
        }
        tailf:meta-data "tailf:alt-name" {
          tailf:meta-value "policy:alt-policy";
        }
        tailf:meta-data "tailf:cli-expose-key-name" {
          tailf:meta-value "policy";
        }
        tailf:meta-data "ID cc:0" {
          tailf:meta-value "policy";
        }
        tailf:meta-data "ID cc:1" {
          tailf:meta-value "test";
        }
      }
      tailf:meta-data "tailf:alt-name" {
        tailf:meta-value "alt-aaa";
      }
      tailf:meta-data "ID cc:3";
    }
    tailf:meta-data "tailf:cli-drop-node-name";
  }
 
When such a YANG model is loaded into ConfD, perhaps together with other "non-
tagged" YANG models, the second step is to traverse the ConfD schema that was
derived from the YANG models and generate an XML file with the commands.
 
Resulting "cli-i-x-dump" for the above YANG example:
 
<?xml version="1.0" encoding="utf-8"?>
<cmd name="alt-aaa">
  <xpath>/cc:native/cc:aaa</xpath>
  <source>ID cc:3</source>
  <params>
    <param>
      <type>presence conrtainer</type>
    </param>
  </params>
  <cmd name="alt-aaa common-criteria">
    <xpath>/cc:native/cc:aaa/cc:common-criteria</xpath>
    <source>ID cc:0</source>
    <params>
      <param name="alt-policy">
        <type>string</type>
      </param>
      <param>
        <type>string</type>
      </param>
    </params>
    <cmd name="char-changes">
      <xpath>/cc:native/cc:aaa/cc:common-criteria/cc:char-changes</xpath>
      <source>ID cc:2</source>
      <params>
        <param>
          <type>uint8</type>
        </param>
      </params>
    </cmd>
  </cmd>
</cmd>
