A Python ConfD to ConfD NETCONF synchronizer application
=======================================================

Build a ConfD Docker container based on the Python / Debian Docker
image and run a NETCONF synchronizer Python ConfD demo where a master
node NETCONF client synchronize to 1 or more sub node NETCONF servers

                        Master Node
                            |
              NETCONF network wide transaction
      --------------------------------------------
     |              |              |              |
 Sub Node 1     Sub Node 2     Sub Node 3    Sub Node 4 ...

- The configuration is synchronized to the sub nodes using NETCONF
  network wide transactions, i.e. all nodes support the NETCONF
  :rollback-on-error, :candidate, :validate1.1, and
  :confirmed-commit1.1 capabilities.
- The sub nodes has a priority so that they either all have the same
  priority, which is performance friendly, or some or all have different
  priorities and then the prioritized subnodes will be updated before
  the less prioritized ones are updated with the new config. Default is
  that all have priority 0 (highest prio).
- Sub nodes with the same priorities are updated in parallel using one
  process per subnode. This greatly improves the performance.
- The sub nodes can subscribe to different parts of the YANG model. Each
  sub node subscribe to it’s own path.
- It is possible to add and remove devices/nodes from the list of
  sub nodes (netconf-servers) to be synced to from the master node
  (netconf-client) at run-time. (join and leave cluster style).
- An action allow you to trigger a “sync-to” of the configuration from
  the master node to one, a few, or all sub nodes.

Prerequisites
-------------

confd-7.x.linux.x86_64.installer.bin
confd-7.x.libconfd.tar.gz
Docker installed

Steps
-----
1. Drop the confd-7.x* installation packages into this directory.
2. Run the setup.sh script.
3. Examine the setup.sh -> Dockerfile -> app/run.sh ->
   confd-sync-nc.py files in that order.
4. The app/run.sh script by default define the number of subnodes to 20
   using the "NUM_NODES" variable. You may change it to any number that
   better represent your system setup.
